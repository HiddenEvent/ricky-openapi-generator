package {{basePackage}}.storage.{{#lambda.camelcase}}{{classname}}{{/lambda.camelcase}}.store

import org.springframework.stereotype.Repository
import com.querydsl.jpa.impl.JPAQueryFactory
import java.util.*

@Repository
internal class {{classname}}JpaStore(
    private val queryFactory: JPAQueryFactory,
    private val {{#lambda.camelcase}}{{{classname}}}{{/lambda.camelcase}}Repository: {{classname}}Repository,
) : {{{classname}}}Store {
    private val Q_{{#lambda.uppercase}}{{{classname}}}{{/lambda.uppercase}} = Q{{classname}}Entity.{{#lambda.camelcase}}{{{classname}}}{{/lambda.camelcase}}Entity

    override fun save{{{classname}}}(domain: {{{classname}}}): {{{classname}}} {
        val entity = {{{classname}}}Entity(domain)
        return {{#lambda.camelcase}}{{{classname}}}{{/lambda.camelcase}}Repository.save(entity).toDomain()
    }

    override fun read{{{classname}}}(id: UUID): {{{classname}}} {
        return {{#lambda.camelcase}}{{{classname}}}{{/lambda.camelcase}}Repository.findByIdOrThrow(id).toDomain()
    }

    override fun delete{{{classname}}}(id: UUID): Boolean {
        {{#lambda.camelcase}}{{{classname}}}{{/lambda.camelcase}}Repository.deleteById(id)
        return true
    }

    override fun readPage(qdo: {{{classname}}}ReadPageQdo): OffsetElements<{{{classname}}}> {
        val query = queryFactory.select(Q_{{#lambda.uppercase}}{{{classname}}}{{/lambda.uppercase}})
            .from(Q_{{#lambda.uppercase}}{{{classname}}}{{/lambda.uppercase}})
        val queryBuilder = OffsetQueryBuilder.build(query, qdo)
        return OffsetElements(queryBuilder.fetch().toDomains(), queryBuilder.fetchCount())
    }
}
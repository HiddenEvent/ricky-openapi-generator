package {{modelPackage}}.entity

import org.hibernate.annotations.Comment
import jakarta.persistence.*
import {{basePackage}}.storage.entity.base.AuditEntity
import {{basePackage}}.spec.domain.{{classname}}

@Comment("{{description}}")
@Entity
@Table(name = "{{#lambda.snakecase}}{{{name}}}{{/lambda.snakecase}}")
internal class {{classname}}Entity(domain: {{classname}}) : AuditEntity<{{classname}}>(domain) {
    /* Required 필드*/{{!
}}{{#requiredVars}}{{^vendorExtensions.x-custom-properties.isInherit}}{{^isModel}}{{^isContainer}}{{!
    }}{{>dataClassReqVar}}{{!
}}{{/isContainer}}{{/isModel}}{{/vendorExtensions.x-custom-properties.isInherit}}{{/requiredVars}}
    /* Optional 필드*/{{!
}}{{#optionalVars}}{{^vendorExtensions.x-custom-properties.isInherit}}{{^isModel}}{{^isContainer}}{{!
    }}{{>dataClassOptVar}}{{!
}}{{/isContainer}}{{/isModel}}{{/vendorExtensions.x-custom-properties.isInherit}}{{/optionalVars}}

{{#Vars}}{{^vendorExtensions.x-custom-properties.isInherit}}{{!
    }}{{#isModel}}{{!
        }}{{>dataClassReqVarModdel}}{{!
    }}{{/isModel}}{{!
    }}{{#isContainer}}{{^isPrimitiveType}}{{^isEnum}}{{!
        }}{{>dataClassReqVarCollection}}{{!
    }}{{/isEnum}}{{/isPrimitiveType}}{{/isContainer}}{{!
}}{{/vendorExtensions.x-custom-properties.isInherit}}{{/Vars}}

    override fun domainInstance(): {{classname}} = {{classname}}(
{{#Vars}}{{^vendorExtensions.x-custom-properties.isInherit}}{{^isModel}}{{^isContainer}}{{>dataClassReqArg}}{{/isContainer}}{{/isModel}}{{/vendorExtensions.x-custom-properties.isInherit}}{{/Vars}}{{!
}}    )

    override fun toDomain() = super.generateDomain().apply {
{{#Vars}}{{^vendorExtensions.x-custom-properties.isInherit}}{{!
    }}{{#isModel}}{{>dataClassReqModelArg}}{{/isModel}}{{!
    }}{{#isContainer}}{{^isPrimitiveType}}{{^isEnum}}{{>dataClassReqCollectionArg}}{{/isEnum}}{{/isPrimitiveType}}{{/isContainer}}{{!
}}{{/vendorExtensions.x-custom-properties.isInherit}}{{/Vars}}{{!
}}    }

}

package {{package}}.api.test.integration.{{#lambda.camelcase}}{{classname}}{{/lambda.camelcase}}

import com.fasterxml.jackson.databind.ObjectMapper
import {{basePackage}}.api.test.utils.PrettyLogger
import {{basePackage}}.api.test.utils.withJwt
import {{basePackage}}.storage.fixture.domain.users.UserFixture
import org.hamcrest.text.MatchesPattern.matchesPattern
import org.junit.jupiter.api.*
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.http.MediaType
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.ResultActions
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath
import org.springframework.test.web.servlet.result.MockMvcResultMatchers.status

@DisplayName("{{classname}} 통합 테스트")
@SpringBootTest
@TestMethodOrder(MethodOrderer.OrderAnnotation::class)
@AutoConfigureMockMvc
class {{classname}}IT {
    @Autowired
    private lateinit var userFixture: UserFixture

//    @Autowired
//    private lateinit var {{classname}}Fixture: TODO("테스트용 Fixture 클래스 생성")

    @Autowired
    private lateinit var mockMvc: MockMvc

    @Autowired
    private lateinit var objectMapper: ObjectMapper

    {{#operations}}
    {{#operation}}

    @DisplayName("{{summary}}")
    @Test
    fun {{operationId}}() {
        //given
        {{#allParams}}
//        val {{{paramName}}}: {{>optionalDataType}} = TODO("테스트 Parameter 생성")
        {{/allParams}}

        //when
        val resultAction: ResultActions = mockMvc.perform(
            {{#lambda.lowercase}}{{httpMethod}}{{/lambda.lowercase}}("{{path}}")
                .withJwt(userFixture.ADMIN_TOKEN) // 인증 필요시
{{!           }}{{#bodyParam.isBodyParam}}{{!
}}                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(TODO()))
{{!           }}{{/bodyParam.isBodyParam}}{{!
}}                //.params(qdo.toMultiValueMap()) // GET: Params 전송 시 사용
        ).andDo(PrettyLogger())

        //then
        resultAction.andExpect(status().isOk)
    }
    {{/operation}}
    {{/operations}}
}

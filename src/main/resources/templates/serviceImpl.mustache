package {{basePackage}}.aggregate.service

import {{basePackage}}.aggregate.store.{{classname}}Store
import {{basePackage}}.spec.domain.{{classname}}
import {{basePackage}}.spec.dto.{{classname}}ReadPageQdo
import {{basePackage}}.spec.dto.base.OffsetElements
import org.springframework.stereotype.Service
import org.springframework.transaction.annotation.Transactional
import java.util.*

@Service
class {{classname}}Service(
    private val {{#lambda.camelcase}}{{{classname}}}Store{{/lambda.camelcase}}: {{classname}}Store,
) {

    @Transactional
    fun create{{{classname}}}(qdo: {{{classname}}}SaveQdo): {{{classname}}} {
        val createDomain = {{{classname}}}(qdo)
        return {{#lambda.camelcase}}{{{classname}}}{{/lambda.camelcase}}Store.save{{{classname}}}(createDomain)
    }

    @Transactional
    fun modify{{{classname}}}(id: UUID, qdo: {{{classname}}}SaveQdo): {{{classname}}} {
        val {{#lambda.camelcase}}{{{classname}}}{{/lambda.camelcase}} = {{#lambda.camelcase}}{{{classname}}}{{/lambda.camelcase}}Store.read{{classname}}(id)
        {{#lambda.camelcase}}{{{classname}}}{{/lambda.camelcase}}.modify{{classname}}(qdo)
        return {{#lambda.camelcase}}{{{classname}}}{{/lambda.camelcase}}Store.save{{{classname}}}({{#lambda.camelcase}}{{{classname}}}{{/lambda.camelcase}})
    }

    @Transactional(readOnly = true)
    fun read{{{classname}}}(id: UUID): {{{classname}}} {
        return {{#lambda.camelcase}}{{{classname}}}{{/lambda.camelcase}}Store.read{{{classname}}}(id)
    }

    @Transactional(readOnly = true)
    fun readPage(qdo: {{{classname}}}ReadPageQdo): OffsetElements<{{{classname}}}> {
        return {{#lambda.camelcase}}{{{classname}}}{{/lambda.camelcase}}Store.readPage(qdo)
    }

}